import requests
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram import Router, F
from keyboards import get_inline_huobi_keyboard, get_main_menu_keyboard

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è Huobi
huobi_router = Router()

# User-Agent –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Huobi
HUOBI_USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/118.0"

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class HuobiState(StatesGroup):
    waiting_for_amount_sell = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è SELL
    waiting_for_amount_buy = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è BUY


def get_huobi_p2p_data(amount: float, trade_type: str = "sell"):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ P2P-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –Ω–∞ Huobi.

    :param amount: –°—É–º–º–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
    :param trade_type: –¢–∏–ø —Å–¥–µ–ª–∫–∏ ("sell" –∏–ª–∏ "buy").
    :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.
    """
    url = "https://www.htx.com/-/x/otc/v1/data/trade-market"
    params = {
        "coinId": 2,  # USDT
        "currency": 172,  # CNY
        "tradeType": trade_type,  # "sell" –∏–ª–∏ "buy"
        "currPage": 1,  # Page 1
        "payMethod": 0,  # All payment methods
        "acceptOrder": 0,
        "country": "",
        "blockType": "general",  # General offers
        "online": 1,  # Only online sellers
        "range": 0,
        "amount": amount,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
        "isThumbsUp": "false",
        "isMerchant": "false",
        "isTraded": "false",
        "onlyTradable": "false",
        "isFollowed": "false",
        "makerCompleteRate": 0
    }

    headers = {
        "User-Agent": HUOBI_USER_AGENT
    }

    response = requests.get(url, params=params, headers=headers)
    data = response.json()

    if data["code"] == 200:
        return data
    else:
        raise Exception(f"Huobi API Error: {data['message']}")


def parse_huobi_p2p_data(data):
    """
    –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ P2P-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö Huobi.

    :param data: –î–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç Huobi API.
    :return: –°–ª–æ–≤–∞—Ä—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–æ–π, –∞ —Ç–∞–∫–∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å Alipay –∏ WeChat.
    """
    prices = []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ü–µ–Ω
    alipay_count = 0  # –°—á–µ—Ç—á–∏–∫ Alipay
    wechat_count = 0  # –°—á–µ—Ç—á–∏–∫ WeChat

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º—Å—è –ø–µ—Ä–≤—ã–º–∏ 10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
    for offer in data["data"][:10]:
        price = float(offer["price"])
        prices.append(price)

        # –ü–æ–¥—Å—á–µ—Ç –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
        payment_methods = [m["name"] for m in offer["payMethods"]]
        if "Alipay" in payment_methods:
            alipay_count += 1
        if "WeChat" in payment_methods:
            wechat_count += 1

    if prices:
        min_price = min(prices)
        max_price = max(prices)
        avg_price = sum(prices) / len(prices)

        return {
            "min_price": min_price,
            "max_price": max_price,
            "avg_price": avg_price,
            "alipay_count": alipay_count,
            "wechat_count": wechat_count
        }
    else:
        return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "Huobi"
@huobi_router.callback_query(F.data == "huobi")
async def huobi_callback(callback: CallbackQuery):
    await callback.message.edit_text(
        "üá®üá≥ Huobi Menu:\n\n"
        "üí± *P2P Market (USDT/CNY):*\n"
        "1Ô∏è‚É£ *Sell* ‚Äì P2P price based on the last 10 sellers of USDT.\n"
        "2Ô∏è‚É£ *Buy* ‚Äì P2P price based on the last 10 buyers of USDT.",
        reply_markup=get_inline_huobi_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è Huobi
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "USDT/CNY SELL"
@huobi_router.callback_query(F.data == "usdtcnysell")
async def usdtcnysell_callback(callback: CallbackQuery, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –º–µ–Ω—é
    await state.update_data(menu_message_id=callback.message.message_id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è SELL
    await state.set_state(HuobiState.waiting_for_amount_sell)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –¥–æ–±–∞–≤–ª—è—è –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Å—É–º–º—ã
    await callback.message.edit_text(
        "üá®üá≥ Huobi P2P (SELL):\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ CNY –¥–ª—è SELL (–û–¢ 100):",
        reply_markup=get_inline_huobi_keyboard()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "USDT/CNY BUY"
@huobi_router.callback_query(F.data == "usdtcnybuy")
async def usdtcnybuy_callback(callback: CallbackQuery, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –º–µ–Ω—é
    await state.update_data(menu_message_id=callback.message.message_id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è BUY
    await state.set_state(HuobiState.waiting_for_amount_buy)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –¥–æ–±–∞–≤–ª—è—è –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Å—É–º–º—ã
    await callback.message.edit_text(
        "üá®üá≥ Huobi P2P (BUY):\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ CNY –¥–ª—è BUY (–û–¢ 100):",
        reply_markup=get_inline_huobi_keyboard()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Huobi (SELL)
@huobi_router.message(HuobiState.waiting_for_amount_sell)
async def handle_huobi_sell_amount(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π message_id –º–µ–Ω—é
    state_data = await state.get_data()
    menu_message_id = state_data.get("menu_message_id")

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
        amount = float(message.text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ 100
        if amount < 100:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=menu_message_id,
                text="üá®üá≥ Huobi P2P (SELL):\n\n"
                     "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ CNY (–û–¢ 100).",
                reply_markup=get_inline_huobi_keyboard()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Huobi API –¥–ª—è SELL
        data = get_huobi_p2p_data(amount, trade_type="sell")

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        parsed_data = parse_huobi_p2p_data(data)

        if parsed_data:
            result_text = (
                f"üá®üá≥ Huobi P2P Data (SELL):\n\n"
                f"üìâ Min Price: {parsed_data['min_price']} CNY\n"
                f"üìà Max Price: {parsed_data['max_price']} CNY\n"
                f"üìä Avg Price: {parsed_data['avg_price']:.2f} CNY\n"
                f"üîµ Alipay Offers: {parsed_data['alipay_count']}/10\n"
                f"üü¢ WeChat Offers: {parsed_data['wechat_count']}/10"
            )
        else:
            result_text = "üá®üá≥ Huobi P2P (SELL):\n\n‚ùå No offers found for the specified amount."

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –¥–æ–±–∞–≤–ª—è—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=menu_message_id,
            text=result_text,
            reply_markup=get_inline_huobi_keyboard()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )

    except ValueError:
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–µ —á–∏—Å–ª–æ)
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=menu_message_id,
            text="üá®üá≥ Huobi P2P (SELL):\n\n"
                 "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ CNY (–û–¢ 100).",
            reply_markup=get_inline_huobi_keyboard()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
    except Exception as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=menu_message_id,
            text=f"üá®üá≥ Huobi P2P (SELL):\n\n‚ö† Error: {str(e)}",
            reply_markup=get_inline_huobi_keyboard()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Huobi (BUY)
@huobi_router.message(HuobiState.waiting_for_amount_buy)
async def handle_huobi_buy_amount(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π message_id –º–µ–Ω—é
    state_data = await state.get_data()
    menu_message_id = state_data.get("menu_message_id")

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
        amount = float(message.text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ 100
        if amount < 100:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=menu_message_id,
                text="üá®üá≥ Huobi P2P (BUY):\n\n"
                     "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ CNY (–û–¢ 100).",
                reply_markup=get_inline_huobi_keyboard()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Huobi API –¥–ª—è BUY
        data = get_huobi_p2p_data(amount, trade_type="buy")

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        parsed_data = parse_huobi_p2p_data(data)

        if parsed_data:
            result_text = (
                f"üá®üá≥ Huobi P2P Data (BUY):\n\n"
                f"üìâ Min Price: {parsed_data['min_price']} CNY\n"
                f"üìà Max Price: {parsed_data['max_price']} CNY\n"
                f"üìä Avg Price: {parsed_data['avg_price']:.2f} CNY\n"
                f"üîµ Alipay Offers: {parsed_data['alipay_count']}/10\n"
                f"üü¢ WeChat Offers: {parsed_data['wechat_count']}/10"
            )
        else:
            result_text = "üá®üá≥ Huobi P2P (BUY):\n\n‚ùå No offers found for the specified amount."

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –¥–æ–±–∞–≤–ª—è—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=menu_message_id,
            text=result_text,
            reply_markup=get_inline_huobi_keyboard()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )

    except ValueError:
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–µ —á–∏—Å–ª–æ)
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=menu_message_id,
            text="üá®üá≥ Huobi P2P (BUY):\n\n"
                 "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ CNY (–û–¢ 100).",
            reply_markup=get_inline_huobi_keyboard()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
    except Exception as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=menu_message_id,
            text=f"üá®üá≥ Huobi P2P (BUY):\n\n‚ö† Error: {str(e)}",
            reply_markup=get_inline_huobi_keyboard()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()