import logging
import asyncio
import os
import aiohttp
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, BotCommand, InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from pybit.unified_trading import HTTP
from dotenv import load_dotenv
from stars import get_ton_rub_price, calculate_star_price

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ keyboards.py
from keyboards import get_main_menu_keyboard, get_inline_bybit_keyboard

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä Huobi –∏–∑ huobi.py
from huobi import huobi_router

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv('TOKEN')

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∏ Bybit
session = HTTP(testnet=False)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    amount = State()  # –£–∂–µ –µ—Å—Ç—å
    stars_ratio = State()  #

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    ]
    await bot.set_my_commands(commands)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def start_command(message: Message):
    await message.answer(
        "üëã Hello! I am a currency bot that can show you the current price of BTC, ETH and P2P rates. Currently only for Bybit and Huobi.\n\n"
        "Choose one of the options below:",
        reply_markup=get_main_menu_keyboard()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

@router.callback_query(F.data == "stars")
async def stars_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–Ω–Ω –¥–ª—è 100 –∑–≤–µ–∑–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.45):",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]
        ])
    )
    await state.set_state(Form.stars_ratio)

@router.message(Form.stars_ratio)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Form.stars_ratio
async def process_stars_ratio(message: Message, state: FSMContext):
    try:
        stars_to_ton_ratio = float(message.text)
        ton_price = get_ton_rub_price()

        if isinstance(ton_price, str) and ton_price.startswith("–û—à–∏–±–∫–∞"):
            await message.answer(ton_price, reply_markup=get_main_menu_keyboard())
            await state.clear()
            return

        star_price = calculate_star_price(ton_price, stars_to_ton_ratio)
        result_text = (
            f"‚≠êÔ∏è *–¶–µ–Ω–∞ –æ–¥–Ω–æ–π –∑–≤–µ–∑–¥—ã:* {star_price} —Ä—É–±–ª–µ–π\n"
            f"üíé *–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ TON/RUB:* {ton_price} —Ä—É–±–ª–µ–π"
        )

        await message.answer(result_text, reply_markup=get_main_menu_keyboard(), parse_mode=ParseMode.MARKDOWN)
        await state.clear()

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.45).")
    except Exception as e:
        logger.error(f"Error in process_stars_ratio: {e}")
        await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "Bybit"
@router.callback_query(F.data == "bybit")
async def bybit_callback(callback: CallbackQuery):
    await callback.message.edit_text(
        "üí≤ Bybit Menu:\n\n"
        "üí∞ *SPOT Market:*\n"
        "1Ô∏è‚É£ *BTC/USDT* ‚Äì Current price of BTC on Bybit SPOT.\n"
        "2Ô∏è‚É£ *ETH/USDT* ‚Äì Current price of ETH on Bybit SPOT.\n\n"
        "üí± *P2P Market (USDT/RUB):*\n"
        "3Ô∏è‚É£ *Buy* ‚Äì P2P price for buying USDT.\n"
        "4Ô∏è‚É£ *Sell* ‚Äì P2P price for selling USDT.",
        reply_markup=get_inline_bybit_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è Bybit
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "Back"
@router.callback_query(F.data == "back")
async def back_callback(callback: CallbackQuery):
    await callback.message.edit_text(
        "üëã Hello! I am a currency bot that can show you the current price of BTC, ETH and P2P rates. Currently only for Bybit and Huobi.\n\n"
        "Choose one of the options below:",
        reply_markup=get_main_menu_keyboard()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    )

@router.callback_query(F.data == "btcusdt")
async def btcusdt_callback(callback: CallbackQuery):
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–∫–µ—Ä—ã –¥–ª—è –ø–∞—Ä—ã BTC/USDT
        response = session.get_tickers(category="spot", symbol="BTCUSDT")
        data = response['result']['list'][0]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        symbol = data['symbol']
        last_price = data['lastPrice']
        high_price = data['highPrice24h']
        low_price = data['lowPrice24h']

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        result = (
            f"üü† *{symbol}*\n"
            f"üí∞ *Current price:* {last_price} USDT\n"
            f"üìà *24h High:* {high_price} USDT\n"
            f"üìâ *24h Low:* {low_price} USDT"
        )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_text(
            result,
            reply_markup=get_inline_bybit_keyboard(),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            parse_mode=ParseMode.MARKDOWN
        )

    except Exception as e:
        logger.error(f"Error in btcusdt_callback: {e}")
        await callback.message.edit_text(f"‚ö† Error: {str(e)}")


@router.callback_query(F.data == "ethusdt")
async def ethusdt_callback(callback: CallbackQuery):
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–∫–µ—Ä—ã –¥–ª—è –ø–∞—Ä—ã ETH/USDT
        response = session.get_tickers(category="spot", symbol="ETHUSDT")
        data = response['result']['list'][0]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        symbol = data['symbol']
        last_price = data['lastPrice']
        high_price = data['highPrice24h']
        low_price = data['lowPrice24h']

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        result = (
            f"üü† *{symbol}*\n"
            f"üí∞ *Current price:* {last_price} USDT\n"
            f"üìà *24h High:* {high_price} USDT\n"
            f"üìâ *24h Low:* {low_price} USDT"
        )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_text(
            result,
            reply_markup=get_inline_bybit_keyboard(),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            parse_mode=ParseMode.MARKDOWN
        )

    except Exception as e:
        logger.error(f"Error in ethusdt_callback: {e}")
        await callback.message.edit_text(f"‚ö† Error: {str(e)}")

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞

@router.inline_query()
async def inline_mode_handler(inline_query: InlineQuery):
    query = inline_query.query.lower()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è BTC
    if query == "btc":
        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É BTC (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–æ–¥, —á—Ç–æ –∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏)
            response = session.get_tickers(category="spot", symbol="BTCUSDT")
            data = response['result']['list'][0]
            symbol = data['symbol']
            last_price = data['lastPrice']
            high_price = data['highPrice24h']
            low_price = data['lowPrice24h']

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (—Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ –∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏)
            result_text = (
                f"üü† *{symbol}*\n"
                f"üí∞ *Current price:* {last_price} USDT\n"
                f"üìà *24h High:* {high_price} USDT\n"
                f"üìâ *24h Low:* {low_price} USDT"
            )

            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è inline-—Ä–µ–∂–∏–º–∞
            result = InlineQueryResultArticle(
                id="1",
                title="üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC",
                input_message_content=InputTextMessageContent(
                    message_text=result_text,
                    parse_mode=ParseMode.MARKDOWN
                ),
                description=f"–¶–µ–Ω–∞ BTC: {last_price} USDT",
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await inline_query.answer([result], cache_time=1)

        except Exception as e:
            logger.error(f"Error in inline BTC query: {e}")
            await inline_query.answer(
                [InlineQueryResultArticle(
                    id="error",
                    title="‚ö† –û—à–∏–±–∫–∞",
                    input_message_content=InputTextMessageContent(
                        message_text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã BTC."
                    )
                )],
                cache_time=1
            )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è ETH
    elif query == "eth":
        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É ETH (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–æ–¥, —á—Ç–æ –∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏)
            response = session.get_tickers(category="spot", symbol="ETHUSDT")
            data = response['result']['list'][0]
            symbol = data['symbol']
            last_price = data['lastPrice']
            high_price = data['highPrice24h']
            low_price = data['lowPrice24h']

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (—Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ –∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏)
            result_text = (
                f"üü£ *{symbol}*\n"
                f"üí∞ *Current price:* {last_price} USDT\n"
                f"üìà *24h High:* {high_price} USDT\n"
                f"üìâ *24h Low:* {low_price} USDT"
            )

            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è inline-—Ä–µ–∂–∏–º–∞
            result = InlineQueryResultArticle(
                id="2",
                title="üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ETH",
                input_message_content=InputTextMessageContent(
                    message_text=result_text,
                    parse_mode=ParseMode.MARKDOWN
                ),
                description=f"–¶–µ–Ω–∞ ETH: {last_price} USDT",
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await inline_query.answer([result], cache_time=1)

        except Exception as e:
            logger.error(f"Error in inline ETH query: {e}")
            await inline_query.answer(
                [InlineQueryResultArticle(
                    id="error",
                    title="‚ö† –û—à–∏–±–∫–∞",
                    input_message_content=InputTextMessageContent(
                        message_text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã ETH."
                    )
                )],
                cache_time=1
            )

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
    else:
        await inline_query.answer(
            [InlineQueryResultArticle(
                id="unknown",
                title="‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                input_message_content=InputTextMessageContent(
                    message_text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `btc` –∏–ª–∏ `eth` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω."
                )
            )],
            cache_time=1
        )

@router.callback_query(F.data == "usdtbuyrub")
async def usdtbuyrub_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä—É–±–ª–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ USDT (–º–∏–Ω–∏–º—É–º 1000) might be delay 2-5sec:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="bybit")]
        ])
    )
    await state.set_state(Form.amount)
    await state.update_data(action="buy")

@router.callback_query(F.data == "usdtrubsell")
async def usdtrubsell_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä—É–±–ª–µ–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ USDT (–º–∏–Ω–∏–º—É–º 1000) might be delay 2-5sec:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="bybit")]
        ])
    )
    await state.set_state(Form.amount)
    await state.update_data(action="sell")

@router.message(Form.amount)
async def process_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount < 1000:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 1000. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–Ω–æ–≤–∞. might be delay 2-5sec")
            return

        data = await state.get_data()
        action = data.get("action")

        url = "https://api2.bybit.com/fiat/otc/item/online"
        side = "1" if action == "buy" else "0"

        payload = {
            "userId": "",
            "tokenId": "USDT",
            "currencyId": "RUB",
            "payment": ["382", "581", "75"],
            "side": side,
            "size": "8",
            "page": "1",
            "amount": str(amount),
            "vaMaker": False,
            "bulkMaker": False,
            "canTrade": True,
            "verificationFilter": 0,
            "sortType": "TRADE_PRICE",
            "paymentPeriod": [],
            "itemRegion": 1
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                result = await response.json()

        prices = []
        if 'result' in result and 'items' in result['result']:
            items = result['result']['items']
            for item in items:
                price = float(item['price'])
                prices.append(price)

            max_price = max(prices)
            min_price = min(prices)
            avg_price = sum(prices) / len(prices)

            result_text = (
                f"‚úÖ {action.upper()} Rate - USDT/RUB:\n"
                f"üìà Max price: {max_price} ‚ÇΩ\n"
                f"üìâ Min price: {min_price} ‚ÇΩ\n"
                f"üìä Average price: {avg_price:.2f} ‚ÇΩ"
            )
        else:
            result_text = "Data not found or response structure is different."

        await message.answer(
            result_text,
            reply_markup=get_inline_bybit_keyboard()
        )
        await state.clear()

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
    except Exception as e:
        logger.error(f"Error in process_amount: {e}")
        await message.answer(f"‚ö† Error: {str(e)}")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
@router.message(F.text)
async def handle_any_message(message: Message):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if not message.text.startswith("/"):
        await message.answer(
            "üëã Hello! I am a currency bot that can show you the current price of BTC, ETH and P2P rates. Currently only for Bybit and Huobi.\n\n"
            "Choose one of the options below:",
            reply_markup=get_main_menu_keyboard()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        )





# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    await set_bot_commands(bot)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä Huobi
    dp.include_router(huobi_router)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)

    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ (–µ—Å–ª–∏ –±—ã–ª)
    await bot.delete_webhook(drop_pending_updates=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())